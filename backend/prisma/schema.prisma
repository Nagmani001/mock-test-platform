// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String
  email      String
  password   String
  TestAnswer TestAnswer[]
}

model Admin {
  id       String @id @default(uuid())
  name     String
  email    String
  password String
}

model Section {
  id       String @id @default(uuid())
  title    String
  imageUrl String
  tests    Test[]
}

model Test {
  id              String      @id @default(uuid())
  title           String
  totalQuestions  Int
  language        String
  totalTimeMinute Int
  totalTimeSecond Int
  totalTimeHour   Int
  question        Question[]
  Section         Section     @relation(fields: [sectionId], references: [id])
  sectionId       String
  TestAnswer      TestAnswer?
}

model Question {
  id                 String    @id @default(uuid())
  question           String
  totalMarks         Int
  passingMarks       Int
  type               TestType
  words              Int
  questionTimeSecond Int
  questionTimeMinute Int
  successMarks       Int
  failureMarks       Int
  testId             String
  Test               Test      @relation(fields: [testId], references: [id])
  solution           Solution?
}

model TestAnswer {
  id              String     @id @default(uuid())
  type            AnswerType
  remainingSecond Int
  remainingMinute Int
  remainingHour   Int
  name            String
  testTitle       String
  totalQuestions  Int
  totalTimeHour   Int
  totalTimeMinute Int
  totalTimeSecond Int
  userId          String
  testId          String     @unique
  submittedAt     DateTime
  solution        Solution[]
  Test            Test       @relation(fields: [testId], references: [id])
  User            User       @relation(fields: [userId], references: [id])
}

model Solution {
  id                 String         @id @default(uuid())
  answer             String
  wordsNumber        Int
  score              Int?
  solutionTimeMinute Int
  solutionTimeSecond Int
  solutionTimeHour   Int
  status             SolutionStatus
  questionId         String         @unique
  testAnswerId       String
  TesaAnswer         TestAnswer     @relation(fields: [testAnswerId], references: [id])
  question           Question       @relation(fields: [questionId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  stars     Int
  meaning   String
  timeStamp DateTime @default(now())
  message   String?
}

enum AnswerType {
  Paused
  Completed
}

enum TestType {
  ESSAY
  LETTER
  COMPREHENSION
}

enum SolutionStatus {
  Answered
  Not_Answered
  Not_Visited
  Marked_For_Review
  Answered_And_Marked_For_Review
}
